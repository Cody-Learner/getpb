#!/bin/bash
# getpb 2019-06-29
# prints PKGBUILD and optionally .SRCINFO and builddepends for official, AUR, and AUR VCS packages.
#

help () {
	echo "

 getpb is an Arch package information gathering tool for official and AUR packages.

 Usage: getpb [option] <package-name>
 Options:
	-S  = Print .SRCINFO
	-Sv = Print .SRCINFO for VCS AUR packages. (Build dep's need installed)
	-Md = List makedepends.
"
	exit
}

main (){

var2=$(sudo pacman -Si "${P}" 2>/dev/null | awk '/Repository/ {print $3}')

if	[[ -d /tmp/getpb/"${P}" ]]; then 
	sudo rm -rd /tmp/getpb/"${P}"
fi
    		      ###     var2 = aur   is my local "aur" repo. Set this as required ###

if	[[ -z $var2 ]] || [[ $var2 = aur ]]; then
	wget -qP /tmp/getpb/"${P}" https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h="${P}"
	mv /tmp/getpb/"${P}"/PKGBUILD*  /tmp/getpb/"${P}"/PKGBUILD 2>/dev/null
fi

if	[[ $var2 = community ]]; then
	wget -qP /tmp/getpb/"${P}" https://git.archlinux.org/svntogit/community.git/plain/trunk/PKGBUILD?h=packages/"${P}"
	mv /tmp/getpb/"${P}"/PKGBUILD*  /tmp/getpb/"${P}"/PKGBUILD 2>/dev/null
fi

if	[[ $var2 = core ]] || [[ $var2 = extra ]]; then
	wget -qP /tmp/getpb/"${P}" https://git.archlinux.org/svntogit/packages.git/plain/"${P}"/repos/"${var2}"-x86_64/PKGBUILD
fi
	echo "
	PKGBUILD:
	"
	cat /tmp/getpb/"${P}"/PKGBUILD 2>/dev/null || { echo "${P} UNAVAILABLE" ; exit 1 ; } ; echo

	echo "
	END PKGBUILD:
	"
}

src (){
	echo "  ========================================================="

	cd /tmp/getpb/"${P}" 2>/dev/null || exit

#### Check if an install script is listed in PKGBUILD. "makepkg --printsrcinfo" will fail if it's missing. ####
#### Fetch snapshot and use it's .SRCINFO.

if	grep -q 'install=' PKGBUILD ; then
	wget https://aur.archlinux.org/cgit/aur.git/snapshot/"${P}".tar.gz 	&>/dev/null
	tar xvzf "${P}".tar.gz							&>/dev/null

	echo "
 	.SRCINFO:
	"
	cat /tmp/getpb/"${P}"/"${P}"/.SRCINFO 2>/dev/null || { echo "${P} .SRCINFO UNAVAILABLE" ; exit 1 ; }

	echo "
 	END .SRCINFO:
	"
	printmessage
	exit	
fi
	makepkg --printsrcinfo &>.SRCINFO

	echo "
 	.SRCINFO:
	"
	cat /tmp/getpb/"${P}"/.SRCINFO 2>/dev/null || { echo "${P} .SRCINFO UNAVAILABLE" ; exit 1 ; }

	echo "
 	END .SRCINFO:
	"
	printmessage
}
vcs(){
	echo "  ========================================================="

	cd /tmp/getpb/"${P}" 2>/dev/null || exit

#### Check if an install script is listed in PKGBUILD. "makepkg --printsrcinfo" will fail if it's missing. ####
#### Fetch snapshot and run makepkg --printsrcinfo &>.SRCINFO.


if	grep -q 'install=' PKGBUILD; then
	wget https://aur.archlinux.org/cgit/aur.git/snapshot/"${P}".tar.gz
	tar xvzf "${P}".tar.gz
	cd /tmp/getpb/"${P}"/"${P}"/ || exit
fi
	makepkg -o --needed --noconfirm	2>/tmp/getpb/"${P}"/iferror
	makepkg --printsrcinfo &>.SRCINFO

if	grep -q ERROR: /tmp/getpb/"${P}"/iferror ; then

	echo; echo "Generating current .SRCINFO with "makepkg --printsrcinfo"  failed with."; echo

	cat /tmp/getpb/"${P}"/iferror 2>/dev/null || { echo "${P} UNAVAILABLE" ; exit 1 ; }

    else
	echo "
	.SRCINFO 
	"
	cat /tmp/getpb/"${P}"/.SRCINFO 2>/dev/null || { echo "${P} UNAVAILABLE" ; exit 1 ; }

	echo "
	END .SRCINFO 
	"
	printmessage
fi
}

printmessage (){

echo "
 Files are available in /tmp/getpb/${P}
"
}
	### Run help on [blank] $1
if	[[ -z $1 ]]; then help
fi
	### Run "main" function to print PKGBUILD as default
if	[[ -z $2 && $1 != -h && $1 != --help ]]; then P="${1}" ; main 
fi

while	:; do
	case "${1}" in
	  -S)			P=$2 ; main ; src									;;
	 -Sv)			P=$2 ; main ; vcs									;;
	 -Md)			P=$2 ; main >/dev/null ; echo ; src | awk '/makedepends/ {print $3}' ; printmessage	;;
	 -h|--help)		help											;;
	 -?*)			echo "Error, see -h or --help or try again"						;;
	   *)	break
	esac
    shift
done
	



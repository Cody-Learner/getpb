#!/bin/bash
# getpb 2021-08-24
# Dependencies: base-devel asp expac auracle

#----------------------------------------------------------------------
### Set variables ###

P="${2}"
basedir="/tmp/getpb" 		; if [[ ! -d ${basedir} ]]; then mkdir -p "${basedir}"; fi
builddir="${basedir}"/"${P}"

#----------------------------------------------------------------------

help (){
	echo "
 getpb is an Arch package information gathering tool for official and AUR packages.

 Usage: getpb [option] <package-name>
 Options:
	-p  = Print PKGBUILD
	-s  = Print .SRCINFO
	-m  = List makedepends
	-h  = Help
"
}

#----------------------------------------------------------------------
### Set official or AUR package ###

setrepo (){

### Official or AUR repo ###

if	pkg=$(auracle search ^"${P}"$) && [[ -n ${pkg} ]] ; then
	repo=AUR

   elif	expac -S '%n' "${P}" &>/dev/null ; then
	repo=OFFICIAL

   else
	echo "	Package NA"
	exit
fi
}

#----------------------------------------------------------------------
### Fetch PKGBUILD ###

pbuild (){

	cd "${basedir}" || exit

if	[[ ${repo} == OFFICIAL ]] ; then

   	if	find "${builddir}" -type d &>/dev/null && find "${builddir}"/PKGBUILD -type f &>/dev/null ; then
		: 								# exit if statement so option parser can print it
	    else
		asp export &>/dev/null "$(expac -S '%r/%n' "${P}")"
    	fi
fi
if	[[ ${repo} == AUR ]] ; then

   	if	find "${builddir}" -type d &>/dev/null && find "${builddir}"/PKGBUILD -type f &>/dev/null ; then
		: 								# exit if statement so option parser can print it
	    else
		mkdir -p "${builddir}"
		cd "${builddir}" || exit	
		auracle show "${P}" --show-file PKGBUILD >PKGBUILD
	fi
fi
}

#----------------------------------------------------------------------
### Print PKGBUILD ###

printpb (){

	cd "${builddir}" || exit

	echo ; echo " BEGIN PKGBUILD
	"
	cat PKGBUILD

	echo ; echo " END PKGBUILD
	"
}

#----------------------------------------------------------------------
### Create .SRCINFO ###

srcinfo (){

	cd "${basedir}" || exit

if	[[ ${repo} == OFFICIAL ]] || [[ ${repo} == AUR ]] ; then

	if	find "${builddir}" -type d &>/dev/null && find "${builddir}"/PKGBUILD -type f &>/dev/null ; then
		cd "${builddir}" || exit

		if	find .SRCINFO -type f &>/dev/null ; then
			:							# exit if statement so option parser can print it
		    else
			echo ; echo " Gathering data to generate .SRCFILE . . . . .
			"
			makepkg --printsrcinfo >.SRCINFO || tryharder
		fi
	    else
		pbuild
		srcinfo
    	fi

fi
}

#----------------------------------------------------------------------
### If makepkg errors/exits for missing files, git clone ###

tryharder (){

red='\033[0;91m'
bold='\033[1m'
none='\033[00m'

	echo; echo -e ${red} ${bold}" Makepkg choked. Git cloning package to obtain required data." ${none}
	echo
	cd "${basedir}"
	rm -rd "${builddir}"
	auracle clone "${P}"	
}

#----------------------------------------------------------------------
### Print .SRCFILE ###

printsrc (){

	cd "${builddir}" || exit

	echo ; echo " BEGIN .SRCINFO
	"
	cat .SRCINFO

	echo ; echo " END .SRCINFO
	"
}

#----------------------------------------------------------------------
### Prepare for and print make depends ###

makedeps (){

	cd "${basedir}" || exit

if	find "${builddir}" -type d &>/dev/null && find "${builddir}"/.SRCINFO -type f &>/dev/null ; then
	cd "${builddir}" || exit

	echo ; echo " Make Dependencies:
	"
	awk '/makedepends/ {print $3}' .SRCINFO

    else

	cd "${basedir}" || exit
	pbuild
	srcinfo
	makedeps
fi

}

#----------------------------------------------------------------------
### Print where files are ###

printmes (){

	echo ; echo " Files available in ${builddir}
	"
}

#----------------------------------------------------------------------
	### Run help on no arguments ###
 
if	[[ -z $1 ]]; then help
fi


#======================================================================

while	:; do
	case "${1}" in
	  -p)			setrepo ; pbuild   ; printpb  ; printmes ;;
	  -s)			setrepo ; srcinfo  ; printsrc ; printmes ;;
	  -m)			setrepo ; makedeps            ; printmes ;;
	  -h|--help)		help					 ;;
	  *)	break							 ;;
	esac
    shift
done
